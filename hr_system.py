#!/usr/bin/env python3
"""
HR System - Sistema de Recursos Humanos
Flask web application with data visualization
"""

from flask import Flask, render_template, request, jsonify, redirect, url_for
from flask_cors import CORS
import pandas as pd
import plotly.graph_objs as go
import plotly.utils
import json
import sqlite3
import os
from datetime import datetime
from dateutil.parser import parse as parse_date

app = Flask(__name__)
CORS(app)

# Configura√ß√£o do banco de dados
DATABASE = 'empresa.db'

def get_db_connection():
    """Conecta ao banco de dados SQLite"""
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    """Inicializa o banco de dados com dados de exemplo"""
    conn = get_db_connection()
    
    # Criar tabela se n√£o existir
    conn.execute('''
        CREATE TABLE IF NOT EXISTS funcionarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            cargo TEXT NOT NULL,
            salario REAL NOT NULL,
            data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            ativo BOOLEAN DEFAULT 1
        )
    ''')
    
    # Verificar se coluna ativo existe e adicionar se necess√°rio
    cursor = conn.cursor()
    cursor.execute("PRAGMA table_info(funcionarios)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if 'ativo' not in columns:
        conn.execute('ALTER TABLE funcionarios ADD COLUMN ativo BOOLEAN DEFAULT 1')
        print("üìù Coluna 'ativo' adicionada √† tabela funcionarios")
    
    if 'data_cadastro' not in columns:
        conn.execute('ALTER TABLE funcionarios ADD COLUMN data_cadastro TIMESTAMP')
        # Atualizar registros existentes com data atual
        conn.execute("UPDATE funcionarios SET data_cadastro = datetime('now') WHERE data_cadastro IS NULL")
        print("üìù Coluna 'data_cadastro' adicionada √† tabela funcionarios")
    
    # Verificar se j√° tem dados
    count = conn.execute('SELECT COUNT(*) FROM funcionarios').fetchone()[0]
    
    if count == 0:
        # Inserir dados de exemplo
        funcionarios_exemplo = [
            ('Jo√£o Silva', 'Desenvolvedor', 5000.00),
            ('Maria Santos', 'Analista', 4500.00),
            ('Ana Costa', 'Gerente', 7000.00),
            ('Carlos Lima', 'Programador', 5500.00),
            ('Pedro Oliveira', 'Designer', 4000.00),
            ('Luciana Ferreira', 'Coordenadora', 6000.00),
            ('Roberto Almeida', 'Desenvolvedor Senior', 8000.00),
            ('Fernanda Rocha', 'Analista de Sistemas', 5200.00),
            ('Marcos Pereira', 'Tech Lead', 9000.00),
            ('Juliana Nascimento', 'Product Owner', 7500.00)
        ]
        
        for nome, cargo, salario in funcionarios_exemplo:
            conn.execute(
                'INSERT INTO funcionarios (nome, cargo, salario) VALUES (?, ?, ?)',
                (nome, cargo, salario)
            )
    
    conn.commit()
    conn.close()

@app.route('/')
def index():
    """P√°gina principal"""
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>HR System - Recursos Humanos</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            h1 { color: #333; text-align: center; }
            .nav { margin: 20px 0; text-align: center; }
            .nav a { margin: 0 10px; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 4px; }
            .nav a:hover { background: #0056b3; }
            .stats { display: flex; justify-content: space-around; margin: 20px 0; }
            .stat-card { background: #f8f9fa; padding: 15px; border-radius: 4px; text-align: center; }
            .stat-number { font-size: 24px; font-weight: bold; color: #007bff; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üè¢ Sistema de Recursos Humanos</h1>
            
            <div class="nav">
                <a href="/funcionarios">üë• Funcion√°rios</a>
                <a href="/dashboard">üìä Dashboard</a>
                <a href="/relatorios">üìà Relat√≥rios</a>
                <a href="/api/funcionarios">üîó API</a>
            </div>
            
            <div id="stats" class="stats">
                <div class="stat-card">
                    <div class="stat-number" id="total-funcionarios">-</div>
                    <div>Total Funcion√°rios</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="salario-medio">-</div>
                    <div>Sal√°rio M√©dio</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="total-cargos">-</div>
                    <div>Cargos √önicos</div>
                </div>
            </div>
            
            <script>
                fetch('/api/stats')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('total-funcionarios').textContent = data.total_funcionarios;
                        document.getElementById('salario-medio').textContent = 'R$ ' + data.salario_medio.toFixed(0);
                        document.getElementById('total-cargos').textContent = data.total_cargos;
                    });
            </script>
        </div>
    </body>
    </html>
    '''

@app.route('/funcionarios')
def funcionarios():
    """Lista todos os funcion√°rios"""
    conn = get_db_connection()
    funcionarios = conn.execute(
        'SELECT * FROM funcionarios WHERE ativo = 1 ORDER BY nome'
    ).fetchall()
    conn.close()
    
    html = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Funcion√°rios - HR System</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }
            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
            th { background-color: #f8f9fa; }
            .back-btn { background: #6c757d; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; }
        </style>
    </head>
    <body>
        <div class="container">
            <a href="/" class="back-btn">‚Üê Voltar</a>
            <h1>üë• Funcion√°rios Ativos</h1>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nome</th>
                        <th>Cargo</th>
                        <th>Sal√°rio</th>
                        <th>Data Cadastro</th>
                    </tr>
                </thead>
                <tbody>
    '''
    
    for funcionario in funcionarios:
        data_cadastro = funcionario['data_cadastro'] or 'N/A'
        html += f'''
                    <tr>
                        <td>{funcionario["id"]}</td>
                        <td>{funcionario["nome"]}</td>
                        <td>{funcionario["cargo"]}</td>
                        <td>R$ {funcionario["salario"]:,.2f}</td>
                        <td>{data_cadastro}</td>
                    </tr>
        '''
    
    html += '''
                </tbody>
            </table>
        </div>
    </body>
    </html>
    '''
    
    return html

@app.route('/dashboard')
def dashboard():
    """Dashboard com gr√°ficos"""
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Dashboard - HR System</title>
        <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }
            .chart { margin: 20px 0; }
            .back-btn { background: #6c757d; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; }
        </style>
    </head>
    <body>
        <div class="container">
            <a href="/" class="back-btn">‚Üê Voltar</a>
            <h1>üìä Dashboard</h1>
            
            <div class="chart">
                <h3>Distribui√ß√£o de Sal√°rios por Cargo</h3>
                <div id="chart-salarios"></div>
            </div>
            
            <div class="chart">
                <h3>Quantidade de Funcion√°rios por Cargo</h3>
                <div id="chart-cargos"></div>
            </div>
        </div>
        
        <script>
            // Carregar dados e criar gr√°ficos
            fetch('/api/funcionarios')
                .then(response => response.json())
                .then(data => {
                    // Gr√°fico de sal√°rios
                    const salarios = {
                        x: data.map(f => f.cargo),
                        y: data.map(f => f.salario),
                        type: 'scatter',
                        mode: 'markers',
                        marker: { size: 12 },
                        name: 'Sal√°rios'
                    };
                    
                    Plotly.newPlot('chart-salarios', [salarios], {
                        title: 'Sal√°rios por Cargo',
                        xaxis: { title: 'Cargo' },
                        yaxis: { title: 'Sal√°rio (R$)' }
                    });
                    
                    // Gr√°fico de contagem por cargo
                    const cargos = {};
                    data.forEach(f => {
                        cargos[f.cargo] = (cargos[f.cargo] || 0) + 1;
                    });
                    
                    const cargoChart = {
                        values: Object.values(cargos),
                        labels: Object.keys(cargos),
                        type: 'pie'
                    };
                    
                    Plotly.newPlot('chart-cargos', [cargoChart], {
                        title: 'Distribui√ß√£o por Cargo'
                    });
                });
        </script>
    </body>
    </html>
    '''

@app.route('/api/funcionarios')
def api_funcionarios():
    """API REST - Lista funcion√°rios"""
    conn = get_db_connection()
    funcionarios = conn.execute(
        'SELECT * FROM funcionarios WHERE ativo = 1 ORDER BY nome'
    ).fetchall()
    conn.close()
    
    result = []
    for funcionario in funcionarios:
        result.append({
            'id': funcionario['id'],
            'nome': funcionario['nome'],
            'cargo': funcionario['cargo'],
            'salario': funcionario['salario'],
            'data_cadastro': funcionario['data_cadastro'],
            'ativo': funcionario['ativo']
        })
    
    return jsonify(result)

@app.route('/api/stats')
def api_stats():
    """API REST - Estat√≠sticas"""
    conn = get_db_connection()
    
    # Total de funcion√°rios ativos
    total = conn.execute(
        'SELECT COUNT(*) FROM funcionarios WHERE ativo = 1'
    ).fetchone()[0]
    
    # Sal√°rio m√©dio
    salario_medio = conn.execute(
        'SELECT AVG(salario) FROM funcionarios WHERE ativo = 1'
    ).fetchone()[0] or 0
    
    # Total de cargos √∫nicos
    total_cargos = conn.execute(
        'SELECT COUNT(DISTINCT cargo) FROM funcionarios WHERE ativo = 1'
    ).fetchone()[0]
    
    conn.close()
    
    return jsonify({
        'total_funcionarios': total,
        'salario_medio': float(salario_medio),
        'total_cargos': total_cargos
    })

@app.route('/relatorios')
def relatorios():
    """Relat√≥rios detalhados"""
    conn = get_db_connection()
    
    # Estat√≠sticas por cargo
    stats_cargo = conn.execute('''
        SELECT 
            cargo,
            COUNT(*) as quantidade,
            AVG(salario) as salario_medio,
            MIN(salario) as salario_min,
            MAX(salario) as salario_max
        FROM funcionarios 
        WHERE ativo = 1 
        GROUP BY cargo 
        ORDER BY quantidade DESC
    ''').fetchall()
    
    conn.close()
    
    html = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Relat√≥rios - HR System</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }
            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
            th { background-color: #f8f9fa; }
            .back-btn { background: #6c757d; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; }
        </style>
    </head>
    <body>
        <div class="container">
            <a href="/" class="back-btn">‚Üê Voltar</a>
            <h1>üìà Relat√≥rios</h1>
            
            <h2>Estat√≠sticas por Cargo</h2>
            <table>
                <thead>
                    <tr>
                        <th>Cargo</th>
                        <th>Quantidade</th>
                        <th>Sal√°rio M√©dio</th>
                        <th>Sal√°rio M√≠nimo</th>
                        <th>Sal√°rio M√°ximo</th>
                    </tr>
                </thead>
                <tbody>
    '''
    
    for stat in stats_cargo:
        html += f'''
                    <tr>
                        <td>{stat["cargo"]}</td>
                        <td>{stat["quantidade"]}</td>
                        <td>R$ {stat["salario_medio"]:,.2f}</td>
                        <td>R$ {stat["salario_min"]:,.2f}</td>
                        <td>R$ {stat["salario_max"]:,.2f}</td>
                    </tr>
        '''
    
    html += '''
                </tbody>
            </table>
        </div>
    </body>
    </html>
    '''
    
    return html

if __name__ == '__main__':
    import sys
    
    # Verificar argumentos da linha de comando
    if len(sys.argv) > 1:
        if sys.argv[1] == 'init':
            print("üîß Inicializando banco de dados...")
            init_db()
            print("‚úÖ Banco de dados inicializado com sucesso!")
            print("üìä Execute 'python3 hr_system.py' para iniciar o servidor")
            sys.exit(0)
        elif sys.argv[1] == 'reset':
            print("üóëÔ∏è Resetando banco de dados...")
            if os.path.exists(DATABASE):
                os.remove(DATABASE)
            init_db()
            print("‚úÖ Banco de dados resetado com sucesso!")
            sys.exit(0)
        elif sys.argv[1] == 'test':
            print("üß™ Executando testes do sistema...")
            
            # Testar conex√£o com banco
            try:
                conn = get_db_connection()
                print("‚úÖ Conex√£o com banco de dados: OK")
                
                # Testar contagem de funcion√°rios
                count = conn.execute('SELECT COUNT(*) FROM funcionarios').fetchone()[0]
                print(f"‚úÖ Total de funcion√°rios no banco: {count}")
                
                # Testar dados b√°sicos
                if count > 0:
                    funcionario = conn.execute('SELECT * FROM funcionarios LIMIT 1').fetchone()
                    print(f"‚úÖ Primeiro funcion√°rio: {funcionario['nome']} - {funcionario['cargo']}")
                
                # Testar estat√≠sticas
                stats = conn.execute('''
                    SELECT 
                        COUNT(*) as total,
                        AVG(salario) as salario_medio,
                        COUNT(DISTINCT cargo) as total_cargos
                    FROM funcionarios WHERE ativo = 1
                ''').fetchone()
                
                print(f"‚úÖ Estat√≠sticas:")
                print(f"   - Total funcion√°rios ativos: {stats['total']}")
                print(f"   - Sal√°rio m√©dio: R$ {stats['salario_medio']:.2f}")
                print(f"   - Cargos √∫nicos: {stats['total_cargos']}")
                
                conn.close()
                
                # Testar importa√ß√µes
                print("‚úÖ Testando importa√ß√µes:")
                try:
                    import pandas as pd
                    print("   - pandas: OK")
                except ImportError:
                    print("   - pandas: ‚ùå ERRO")
                
                try:
                    import plotly.graph_objs as go
                    print("   - plotly: OK")
                except ImportError:
                    print("   - plotly: ‚ùå ERRO")
                
                try:
                    from flask import Flask
                    print("   - Flask: OK")
                except ImportError:
                    print("   - Flask: ‚ùå ERRO")
                
                try:
                    from flask_cors import CORS
                    print("   - Flask-CORS: OK")
                except ImportError:
                    print("   - Flask-CORS: ‚ùå ERRO")
                
                print("\nüéâ Todos os testes passaram!")
                print("Execute 'python3 hr_system.py' para iniciar o servidor")
                
            except Exception as e:
                print(f"‚ùå Erro durante o teste: {e}")
                sys.exit(1)
            
            sys.exit(0)
        elif sys.argv[1] == 'setup':
            print("üõ†Ô∏è Configurando HR System...")
            
            # Verificar depend√™ncias
            print("\nüì¶ Verificando depend√™ncias:")
            missing_deps = []
            
            try:
                import flask
                print("   ‚úÖ Flask instalado")
            except ImportError:
                print("   ‚ùå Flask n√£o encontrado")
                missing_deps.append("Flask")
            
            try:
                import flask_cors
                print("   ‚úÖ Flask-CORS instalado")
            except ImportError:
                print("   ‚ùå Flask-CORS n√£o encontrado")
                missing_deps.append("Flask-CORS")
            
            try:
                import pandas
                print("   ‚úÖ pandas instalado")
            except ImportError:
                print("   ‚ùå pandas n√£o encontrado")
                missing_deps.append("pandas")
            
            try:
                import plotly
                print("   ‚úÖ plotly instalado")
            except ImportError:
                print("   ‚ùå plotly n√£o encontrado")
                missing_deps.append("plotly")
            
            try:
                import dateutil
                print("   ‚úÖ python-dateutil instalado")
            except ImportError:
                print("   ‚ùå python-dateutil n√£o encontrado")
                missing_deps.append("python-dateutil")
            
            if missing_deps:
                print(f"\n‚ùå Depend√™ncias faltando: {', '.join(missing_deps)}")
                print("Execute o comando:")
                print(f"pip install --break-system-packages {' '.join(missing_deps)}")
                sys.exit(1)
            
            print("\n‚úÖ Todas as depend√™ncias est√£o instaladas!")
            
            # Configurar banco de dados
            print("\nüóÑÔ∏è Configurando banco de dados...")
            try:
                init_db()
                print("‚úÖ Banco de dados configurado com sucesso!")
            except Exception as e:
                print(f"‚ùå Erro ao configurar banco: {e}")
                sys.exit(1)
            
            # Verificar estrutura de arquivos
            print("\nüìÅ Verificando estrutura de arquivos:")
            files_to_check = [
                'hr_system.py',
                'requirements.txt',
                'empresa.db'
            ]
            
            for file in files_to_check:
                if os.path.exists(file):
                    print(f"   ‚úÖ {file}")
                else:
                    print(f"   ‚ùå {file} n√£o encontrado")
            
            # Mostrar informa√ß√µes do sistema
            print("\nüñ•Ô∏è Informa√ß√µes do sistema:")
            print(f"   - Python: {sys.version.split()[0]}")
            print(f"   - Diret√≥rio atual: {os.getcwd()}")
            print(f"   - Banco de dados: {DATABASE}")
            
            # Testar servidor
            print("\nüåê Testando configura√ß√£o do servidor...")
            try:
                from flask import Flask
                test_app = Flask(__name__)
                print("   ‚úÖ Flask pode criar aplica√ß√£o")
            except Exception as e:
                print(f"   ‚ùå Erro ao testar Flask: {e}")
                sys.exit(1)
            
            print("\nüéâ Setup completo!")
            print("\nPr√≥ximos passos:")
            print("1. Execute 'python3 hr_system.py' para iniciar o servidor")
            print("2. Acesse http://localhost:5000 no navegador")
            print("3. Use 'python3 hr_system.py test' para verificar tudo")
            
            sys.exit(0)
        elif sys.argv[1] == '--help' or sys.argv[1] == '-h':
            print("HR System - Sistema de Recursos Humanos")
            print("")
            print("Uso:")
            print("  python3 hr_system.py          # Iniciar servidor web")
            print("  python3 hr_system.py init     # Apenas inicializar banco")
            print("  python3 hr_system.py reset    # Resetar banco de dados")
            print("  python3 hr_system.py test     # Executar testes do sistema")
            print("  python3 hr_system.py setup    # Configura√ß√£o completa do sistema")
            print("  python3 hr_system.py --help   # Mostrar esta ajuda")
            sys.exit(0)
        else:
            print(f"‚ùå Argumento desconhecido: {sys.argv[1]}")
            print("Use 'python3 hr_system.py --help' para ver op√ß√µes dispon√≠veis")
            sys.exit(1)
    
    # Inicializar banco de dados automaticamente
    init_db()
    
    print("üöÄ Iniciando HR System...")
    print("üìä Dashboard dispon√≠vel em: http://localhost:5000")
    print("üë• Funcion√°rios em: http://localhost:5000/funcionarios")
    print("üîó API em: http://localhost:5000/api/funcionarios")
    
    # Executar aplica√ß√£o Flask
    app.run(debug=True, host='0.0.0.0', port=5000)